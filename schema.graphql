type Governor @entity {
  id: ID!
  proposalCount: Int!
  quorumVotes: BigInt!
  proposalThreshold: BigInt!
  votingDelay: Int!
  proposalMaxOperations: Int!
  votingPeriod: Int!
  breakGlassGuardian: Bytes!
  timelock: Bytes!
}

type Proposal @entity {
  # proposal id
  id: ID!
  # add this because we want to support range query by proposal id, and the `id` field doesn't support this as it is String
  proposalID: Int!
  proposer: Proposer!
  targets: [Bytes!]!
  values: [BigInt!]!
  signatures: [String!]!
  calldatas: [Bytes!]!
  startTimestamp: BigInt!
  endTimestamp: BigInt!
  startBlock: BigInt!
  canceled: Boolean!
  executed: Boolean!
  forVotes: BigInt!
  againstVotes: BigInt!
  abstainVotes: BigInt!
  totalVotes: BigInt!
  description: String!
  stateChanges: [ProposalStateChange!]! @derivedFrom(field: "proposal")
}

enum ProposalState {
  CREATED
  CANCELED
  EXECUTED
  QUEUED
}

type ProposalStateChange @entity {
  # {txn hash}-{log index}
  id: ID!
  proposal: Proposal!
  txnHash: Bytes!
  blockNumber: BigInt!
  newState: ProposalState!
  queueEta: BigInt # only set this field when newState == QUEUED
  messages: [Message!]! @derivedFrom(field: "proposalStateChange")
}

type Vote @entity {
  # {txn hash}-{log index}
  id: ID!
  txnHash: Bytes!
  blockNumber: BigInt!
  voter: Voter!
  proposal: Proposal!
  voteValue: Int!
  votes: BigInt!
}

type Proposer @entity {
  id: ID!
  proposals: [Proposal!]! @derivedFrom(field: "proposer")
}

type Voter @entity {
  id: ID!
  votes: [Vote!]! @derivedFrom(field: "voter")
}

type Message @entity {
  # txn hash
  id: ID!
  proposalStateChange: ProposalStateChange
  sender: Bytes
  sequence: BigInt
  nonce: Int
  payload: Bytes
  consistencyLevel: Int
  timestamp: BigInt
}
